{"version":3,"file":"static/js/849.24ffbd06.chunk.js","mappings":"wRAGaA,EAAeC,EAAAA,EAAAA,KAAH,4FAMZC,EAAYD,EAAAA,EAAAA,MAAH,kIAOTE,EAAaF,EAAAA,EAAAA,MAAH,0FAKVG,EAAQH,EAAAA,EAAAA,MAAH,oO,GAgBOA,EAAAA,EAAAA,OAAH,uN,kBC7BTI,EAAO,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAMXC,GAASC,EAAAA,EAAAA,MACTC,GAAWD,EAAAA,EAAAA,MAEXE,EAAgB,SAAAC,GACpB,MAAwBA,EAAMC,OAAtBX,EAAR,EAAQA,KAAMY,EAAd,EAAcA,MACd,OAAQZ,GACN,IAAK,OACHC,EAAQW,GACR,MACF,IAAK,SACHT,EAAUS,GACV,MACF,QACE,OAEL,EASD,OACE,UAACnB,EAAD,CAAcoB,SARK,SAAAH,GACnBA,EAAMI,iBAtBa,SAAAC,GACnB,IAAMC,GAASC,EAAAA,EAAAA,IAAWF,GAC1BX,EAASY,EACV,CAoBCE,CAAa,CAAElB,KAAAA,EAAME,OAAAA,IACrBD,EAAQ,IACRE,EAAU,GACX,EAGC,WACE,UAACR,EAAD,CAAWwB,QAASb,EAApB,mBAEE,SAACT,EAAD,CACEuB,KAAK,OACLpB,KAAK,OACLY,MAAOZ,EACPqB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SAAUf,QAGd,UAACb,EAAD,CAAYuB,QAASX,EAArB,qBAEE,SAACX,EAAD,CACEuB,KAAK,MACLpB,KAAK,SACLY,MAAOV,EACPmB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,SAAUf,QAGd,SAACgB,EAAA,EAAD,CAAQC,QAAQ,YAAYN,KAAK,SAAjC,2BAKL,ECvEYO,EAAcjC,EAAAA,EAAAA,GAAH,uLAWXkC,EAAOlC,EAAAA,EAAAA,GAAH,qLASJmC,EAAenC,EAAAA,EAAAA,OAAH,uNCfZoC,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB3B,GAAWC,EAAAA,EAAAA,MAOX2B,EAAWD,EAAME,KAAI,YAA2B,IAAxBjC,EAAuB,EAAvBA,KAAME,EAAiB,EAAjBA,OAAQgC,EAAS,EAATA,GAC1C,OACE,UAACN,EAAD,WACG5B,EADH,KACWE,EAAQ,KACjB,SAAC2B,EAAD,CAAcT,KAAK,SAASe,QAAS,kBATnB,SAAAD,GACtB,IAAMlB,GAASoB,EAAAA,EAAAA,IAAcF,GAC7B9B,EAASY,EACV,CAMgDqB,CAAgBH,EAAtB,EAArC,sBAFSA,EAOd,IACD,OAAO,SAACP,EAAD,UAAcK,GACtB,E,UCtBYM,EAAa5C,EAAAA,EAAAA,IAAH,6CAGV6C,EAAc7C,EAAAA,EAAAA,EAAH,iFAKX8C,EAAc9C,EAAAA,EAAAA,MAAH,mJCiBxB,EArBe,SAAC,GAAgB,IAAd+C,EAAa,EAAbA,OACVrC,GAAWC,EAAAA,EAAAA,MAKXqC,GAAWnC,EAAAA,EAAAA,MAEjB,OACE,UAAC+B,EAAD,YACE,SAACC,EAAD,CAAapB,QAASuB,EAAtB,mCACA,SAACF,EAAD,CACEpB,KAAK,OACLpB,KAAK,SACLY,MAAO6B,EACPjB,SAbiB,SAAAd,GACrB,IAAQE,EAAUF,EAAMC,OAAhBC,MACRR,GAASuC,EAAAA,EAAAA,IAAU/B,GACpB,MAcF,ECxBYgC,EAAYlD,EAAAA,EAAAA,IAAH,yIAQTmD,EAAQnD,EAAAA,EAAAA,GAAH,+HAMLoD,EAAWpD,EAAAA,EAAAA,GAAH,oJChBRqD,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,MAAmB,CACzCC,QAASD,EAASC,QAClBC,MAAOF,EAASE,MAFM,EAKXC,EAAsB,SAAC,GAA0B,IAAxBH,EAAuB,EAAvBA,SAAUP,EAAa,EAAbA,OAC9C,IAAKA,EACH,OAAOO,EAASjB,MAGlB,IAAMqB,EAAmBX,EAAOY,oBAMhC,OALyBL,EAASjB,MAAMU,QAAO,YAG7C,OAH2D,EAAXzC,KACpBqD,oBACEC,SAASF,EAExC,GAEF,ECNYG,EAAY,WACvB,IAAMP,GAAWQ,EAAAA,EAAAA,IAAYL,GAC7B,GAA6BK,EAAAA,EAAAA,IAAYT,GAAjCU,EAAR,EAAQA,UAAWP,EAAnB,EAAmBA,MACbT,GAASe,EAAAA,EAAAA,IAAYE,EAAAA,IACrBtD,GAAWC,EAAAA,EAAAA,MAMjB,OAJAsD,EAAAA,EAAAA,YAAU,WACRvD,GAASwD,EAAAA,EAAAA,MACV,GAAE,CAACxD,KAGF,UAACwC,EAAD,YACE,SAACC,EAAD,yBACA,SAAC/C,EAAD,KACA,SAACgD,EAAD,wBACA,SAAC,EAAD,CAAQL,OAAQA,KAChB,SAACX,EAAD,CAAUC,MAAOiB,IAChBS,IAAa,sCACbP,IAAS,wDAGf,EC7Bc,SAASW,IACtB,OACE,0BACE,SAACN,EAAD,KAGL,C,wDCRM,IAkBIhD,EAAS,eAACuD,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAChC,EAAIiC,GAWvD,OAREjC,IAFFiC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/PhoneBook/Form/Form.styled.jsx","components/PhoneBook/Form/Form.jsx","components/PhoneBook/Contacts/Contacts.styled.jsx","components/PhoneBook/Contacts/Contacts.jsx","components/PhoneBook/Filter/Filter.styled.jsx","components/PhoneBook/Filter/Filter.jsx","components/PhoneBook/PhoneBook.styled.jsx.jsx","redux/contacts/contactsSelector.js","components/PhoneBook/PhoneBook.jsx","pages/MyPhonebookPage/MyPhoneBookPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n// import { Field, Form, ErrorMessage} from 'formik'\n\nexport const ContactsForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n`;\n\nexport const LabelName = styled.label`\n  margin-top: 0;\n  margin-bottom: 30px;\n  margin-left: 45px;\n  font-size: 40px;\n  font-weight: bold;\n`;\nexport const LabelPhone = styled.label`\n  margin-bottom: 20px;\n  font-size: 40px;\n  font-weight: bold;\n`;\nexport const Input = styled.input`\n  diplay: flex;\n  flex-direction: column;\n  font-size: 40px;\n  margin-left: 20px;\n  border: 1px solid green;\n  border-radius: 4px;\n  background-color: #9a9a9a;\n  color: black;\n  cursor: pointer;\n`;\n// export const Error = styled(ErrorMessage)`\n// font-size:15px;\n// font-weght: 400;\n// color: red;\n// `\nexport const AddButton = styled.button`\n  margin-top: 0;\n  margin-left: 160px;\n  width: 200px;\n  height: 40px;\n  border: 1px solid green;\n  border-radius: 4px;\n  color: black;\n  background-color: grey;\n  font-weight: 500;\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport { Input, LabelName, LabelPhone, ContactsForm } from './Form.styled';\nimport Button from '@mui/material/Button';\n\nexport const Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const onAddContact = contact => {\n    const action = addContact(contact);\n    dispatch(action);\n  };\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const onInputChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const onSubmitForm = event => {\n    event.preventDefault();\n    onAddContact({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <ContactsForm onSubmit={onSubmitForm}>\n      <LabelName htmlFor={nameId}>\n        Name:\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={onInputChange}\n        />\n      </LabelName>\n      <LabelPhone htmlFor={numberId}>\n        Number:\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={onInputChange}\n        />\n      </LabelPhone>\n      <Button variant=\"contained\" type=\"submit\">\n        Add contact\n      </Button>\n    </ContactsForm>\n  );\n};\n\nForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\n// const initialValues = {\n//     name: '',\n//     number: '',\n\n// };\n// const schema = yup.object().shape({\n//     name: yup.string().required(),\n//     number: yup.number().required().positive().integer(),\n\n// })\n// export class FormPhone extends React.Component {\n\n//     handleSubmit = (values, actions) => {\n\n//         const id = nanoid(10);\n//         const contact = {\n//           id,\n//           ...values,\n//         };\n//         this.props.submit(contact);\n//         console.log(values);\n//         console.log(actions);\n//         actions.resetForm();\n\n//     };\n//     // static propTypes = {\n//     //     onSubmit: PropTypes.func.isRequired,\n//     //   };\n\n//       render() {\n\n//         return (<div>\n//             <Formik\n//                 initialValues={initialValues}\n//                 onSubmit ={this.handleSubmit}\n//                 validationSchema={schema}>\n//             <ContactsForm >\n//                 <LabelName>Name:\n//                     <Input\n//                         type=\"text\"\n//                         name=\"name\"\n//                         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//                         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//                         required\n//                         placeholder=\"Please enter name\"\n//                         autocomplete=\"off\"\n//                         />\n//                         <Error component=\"div\" name=\"name\" />\n\n//                 </LabelName>\n\n//                 <LabelPhone>Number:\n//                     <Input\n//                         type=\"tel\"\n//                         name=\"number\"\n//                         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//                         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//                         required\n//                         placeholder=\"Please enter number\"\n//                         autocomplete=\"off\"\n//                         />\n//                         <Error component=\"div\" name=\"number\" />\n//                 </LabelPhone>\n//                 <AddButton type=\"submit\">Add contact\n//                 </AddButton>\n//             </ContactsForm>\n\n//         </Formik>\n//         </div>)\n\n//       }\n// };\n","import styled from '@emotion/styled';\nexport const ContactList = styled.ul`\nlist-style: none;\nmargin top: 40px;\npadding: 0;\ndisplay: flex;\nflex-direction: column;\nflexwrap: wrap;\njustify-content: center;\nalign-items: center;\n\n`;\nexport const Item = styled.li`\n  margin-right: 20px;\n  & :last-child {\n    margin-right: 0;\n  }\n  font-size: 15px;\n  font-weight: bold;\n  font-family: 'Helvetica Neue', sans serif;\n`;\nexport const DeleteButton = styled.button`\n  margin-left: 20px;\n  width: 40px;\n  height: 20px;\n  border: 1px solid green;\n  border-radius: 4px;\n  color: black;\n  background-color: grey;\n  font-weight: 400;\n  font-size: 10px;\n`;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n// import { ContactsItem } from 'components/ContactsItem/ContactsItem';\nimport { ContactList, Item, DeleteButton } from './Contacts.styled';\nexport const Contacts = ({ items }) => {\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => {\n    const action = deleteContact(id);\n    dispatch(action);\n  };\n\n  const elements = items.map(({ name, number, id }) => {\n    return (\n      <Item key={id}>\n        {name}: {number}{' '}\n        <DeleteButton type=\"submit\" onClick={() => onDeleteContact(id)}>\n          Delete\n        </DeleteButton>\n      </Item>\n    );\n  });\n  return <ContactList>{elements}</ContactList>;\n};\n// Contacts.propTypes = {\n//   items: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//       id: PropTypes.string.isRequired,\n//     }).isRequired\n//   ),\n//   deleteContact: PropTypes.func.isRequired,\n// };\n","import styled from '@emotion/styled'\n\n\nexport const FilterList = styled.div`\nmargin-left: 160px;\n`;\nexport const FilterTitle = styled.p`\nmargin-left:20px;\nfont-size: 20px;\nfont-weight: bold;\n`;\nexport const FilterInput = styled.input`\nfont-size: 20px;\nborder: 1px solid green;\nborder-radius: 4px;\ncolor: black;\nbackground-color: grey;\ncursor: pointer;\n`","import React from 'react';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport { FilterList, FilterTitle, FilterInput } from './Filter.styled';\n\nconst Filter = ({ filter }) => {\n  const dispatch = useDispatch();\n  const onChangeFilter = event => {\n    const { value } = event.target;\n    dispatch(setFilter(value));\n  };\n  const filterID = nanoid();\n\n  return (\n    <FilterList>\n      <FilterTitle htmlFor={filterID}>Find contact by name</FilterTitle>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChangeFilter}\n      ></FilterInput>\n    </FilterList>\n  );\n};\n\nexport default Filter;\n\n// Filter.propTypes = {\n//   filter: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n","import styled from '@emotion/styled';\n\nexport const AppStyled = styled.div`\n  display: flex;\n  height: 100vh;\n  flex-direction: column;\n  padding: 15px;\n\n  background-color: #ede7f6;\n`;\nexport const Title = styled.h1`\n  margin-left: 160px;\n  font-size: 50px;\n  font-weight: bold;\n  font-family: 'Roboto', sans-serif;\n`;\nexport const SubTitle = styled.h2`\n  margin-top: 40px;\n  margin-left: 160px;\n  font-weight: bold;\n  font-size: 30px;\n  font-family: 'Roboto', sans-serif;\n`;\n","export const getState = ({ contacts }) => ({\n  loading: contacts.loading,\n  error: contacts.error,\n});\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n\n  const normalizedFilter = filter.toLocaleLowerCase();\n  const filteredContacts = contacts.items.filter(({ name }) => {\n    const normalizedName = name.toLocaleLowerCase();\n    const result = normalizedName.includes(normalizedFilter);\n    return result;\n  });\n  return filteredContacts;\n};\n\nexport const getLoadingStatus = state => state.contacts.loading;","import { Form } from './Form/Form';\nimport { Contacts } from './Contacts/Contacts';\nimport Filter from './Filter/Filter';\nimport { AppStyled, Title, SubTitle } from './PhoneBook.styled.jsx.jsx';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport { getFilter } from 'redux/filter/filterSlice';\nimport { getFilteredContacts, getState } from 'redux/contacts/contactsSelector';\n\nexport const PhoneBook = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const { isLoading, error } = useSelector(getState);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <AppStyled>\n      <Title>Phonebook</Title>\n      <Form />\n      <SubTitle>Contacts</SubTitle>\n      <Filter filter={filter} />\n      <Contacts items={contacts} />\n      {isLoading && <p>...loading</p>}\n      {error && <p>oops, something went wrong</p>}\n    </AppStyled>\n  );\n};\n","import React from 'react';\nimport { PhoneBook } from '../../components/PhoneBook/PhoneBook';\n\nexport default function MyPhoneBookPage() {\n  return (\n    <div>\n      <PhoneBook />\n    </div>\n  );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactsForm","styled","LabelName","LabelPhone","Input","Form","useState","name","setName","number","setNumber","dispatch","useDispatch","nameId","nanoid","numberId","onInputChange","event","target","value","onSubmit","preventDefault","contact","action","addContact","onAddContact","htmlFor","type","pattern","title","required","onChange","Button","variant","ContactList","Item","DeleteButton","Contacts","items","elements","map","id","onClick","deleteContact","onDeleteContact","FilterList","FilterTitle","FilterInput","filter","filterID","setFilter","AppStyled","Title","SubTitle","getState","contacts","loading","error","getFilteredContacts","normalizedFilter","toLocaleLowerCase","includes","PhoneBook","useSelector","isLoading","getFilter","useEffect","fetchContacts","MyPhoneBookPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}