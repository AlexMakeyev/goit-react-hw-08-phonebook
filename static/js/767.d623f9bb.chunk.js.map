{"version":3,"file":"static/js/767.d623f9bb.chunk.js","mappings":"kPAiBA,EAjBe,CACXA,MAAO,CACHC,MAAO,aACPC,KAAM,QACNC,KAAM,QACNC,YAAa,mBACbC,UAAU,GAEdC,SAAU,CACNL,MAAO,gBACPC,KAAM,WACNC,KAAM,WACNC,YAAa,sCACbC,UAAU,I,SCNH,SAASE,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOR,EAAP,KAAcS,EAAd,KACA,GAAgCD,EAAAA,EAAAA,UAAS,IAAzC,eAAOF,EAAP,KAAiBI,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAUC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAErCE,EAAgB,SAAAC,GACpB,MAAwBA,EAAMC,OAAtBjB,EAAR,EAAQA,KAAMkB,EAAd,EAAcA,MACd,OAAQlB,GACN,IAAK,QACHO,EAASW,GACT,MACF,IAAK,WACHV,EAAYU,GACZ,MACF,QACE,OAEL,EAYD,OACE,0BACE,kBAAMC,SATW,SAAAH,GACnBA,EAAMI,iBALQ,SAAAC,GACd,IAAMC,GAASC,EAAAA,EAAAA,IAAMF,GACrBZ,EAASa,EACV,CAGCE,CAAQ,CAAE1B,MAAAA,EAAOM,SAAAA,IACjBG,EAAS,IACTC,EAAY,GACb,EAIG,WACE,mBAAOiB,QAASd,EAAhB,oBAEE,0BACEe,GAAIf,EACJO,MAAOpB,EACP6B,SAAUZ,GACNa,EAAAA,YAGR,mBAAOH,QAASX,EAAhB,uBAEE,0BACEY,GAAIZ,EACJI,MAAOd,EACPuB,SAAUZ,GACNa,EAAAA,eAGR,mBAAQ3B,KAAK,SAAb,uBAIP,CC1Dc,SAAS4B,IAKtB,OACE,0BACE,SAACxB,EAAD,KAGL,C,wDCfM,IAkBIQ,EAAS,eAACiB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACR,EAAIS,GAWvD,OARET,IAFFS,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/LoginForm/fields.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["const fields = {\n    email: {\n        label: \"User email\",\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Enter user email\",\n        required: true,\n    },\n    password: {\n        label: \"User password\",\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Enter user password (min 8 symbols)\",\n        required: true,\n    }\n}\n\nexport default fields;","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/operations';\nimport { nanoid } from 'nanoid';\nimport { useMemo } from 'react';\nimport fields from './fields';\n\nexport default function LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  const onInputChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const onLogin = data => {\n    const action = login(data);\n    dispatch(action);\n  };\n  const onSubmitForm = event => {\n    event.preventDefault();\n    onLogin({ email, password });\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmitForm}>\n        <label htmlFor={emailId}>\n          Email:\n          <input\n            id={emailId}\n            value={email}\n            onChange={onInputChange}\n            {...fields.email}\n          />\n        </label>\n        <label htmlFor={passwordId}>\n          Password:\n          <input\n            id={passwordId}\n            value={password}\n            onChange={onInputChange}\n            {...fields.password}\n          />\n        </label>\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  );\n}\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport React from 'react';\n// import { isLogin } from 'redux/auth/authSelector';\n// import { useSelector } from 'react-redux';\n// import { Navigate } from 'react-router-dom';\n\nexport default function LoginPage() {\n  // const isUserLogin = useSelector(isLogin);\n  // if (isUserLogin) {\n  //   return <Navigate to=\"/contacts\" />;\n  // }\n  return (\n    <div>\n      <LoginForm />\n    </div>\n  );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["email","label","name","type","placeholder","required","password","LoginForm","useState","setEmail","setPassword","dispatch","useDispatch","emailId","useMemo","nanoid","passwordId","onInputChange","event","target","value","onSubmit","preventDefault","data","action","login","onLogin","htmlFor","id","onChange","fields","LoginPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}